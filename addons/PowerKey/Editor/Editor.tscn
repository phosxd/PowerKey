[gd_scene load_steps=6 format=3 uid="uid://dq2ev084rdi4r"]

[ext_resource type="Script" uid="uid://dukqioilv2187" path="res://addons/PowerKey/Editor/Editor.gd" id="1_1jgx6"]
[ext_resource type="Texture2D" uid="uid://cj6hwjccreqr7" path="res://addons/PowerKey/github.svg" id="1_sgcgi"]

[sub_resource type="LabelSettings" id="LabelSettings_07ncw"]
font_size = 26
outline_size = 1

[sub_resource type="LabelSettings" id="LabelSettings_1jgx6"]
font_size = 32
shadow_size = 3
shadow_color = Color(0, 0, 0, 1)

[sub_resource type="LabelSettings" id="LabelSettings_fjtuu"]
font_color = Color(1, 0, 0, 1)

[node name="Editor" type="VBoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3
script = ExtResource("1_1jgx6")

[node name="Top Bar" type="HBoxContainer" parent="."]
layout_mode = 2

[node name="Tab Bar" type="TabBar" parent="Top Bar"]
layout_mode = 2
current_tab = 0
clip_tabs = false
scrolling_enabled = false
tab_count = 2
tab_0/title = "Configure"
tab_1/title = "Guide"

[node name="Version" type="Label" parent="Top Bar"]
layout_mode = 2
size_flags_horizontal = 10
text = "v1.4.2"

[node name="Button Github" type="Button" parent="Top Bar"]
layout_mode = 2
theme_override_constants/icon_max_width = 23
icon = ExtResource("1_sgcgi")

[node name="Tabs" type="TabContainer" parent="."]
layout_mode = 2
size_flags_vertical = 3
current_tab = 0
tabs_visible = false

[node name="Configure" type="VBoxContainer" parent="Tabs"]
layout_mode = 2
metadata/_tab_index = 0

[node name="Top Sep" type="HSeparator" parent="Tabs/Configure"]
layout_mode = 2

[node name="Resources Path" type="HBoxContainer" parent="Tabs/Configure"]
layout_mode = 2

[node name="Title" type="Label" parent="Tabs/Configure/Resources Path"]
layout_mode = 2
tooltip_text = "Path to a GDScript file to be used as the Resources Script.

The script file will be instantiated during runtime & used by PKExpressions."
mouse_filter = 0
text = "Resources Script Path:"

[node name="Text Box" type="TextEdit" parent="Tabs/Configure/Resources Path"]
layout_mode = 2
size_flags_horizontal = 3
text = "res://addons/PowerKey/Example/PKResources.gd"
placeholder_text = "Enter path to Script..."
scroll_fit_content_height = true
caret_blink = true
caret_multiple = false
draw_control_chars = true
draw_tabs = true
draw_spaces = true

[node name="Max Cached PKExpressions" type="HBoxContainer" parent="Tabs/Configure"]
layout_mode = 2

[node name="Title" type="Label" parent="Tabs/Configure/Max Cached PKExpressions"]
layout_mode = 2
tooltip_text = "How many PKExpressions can be stored in cache memory at any given moment.
If the cache size is not limited, it could potentially waste RAM for storing every expression ever parsed.
I recommend keeping the max cache size low, or even 0 if you don't think you need it.

Before parsing an expression, it searches for a cached expression that has previously been parsed.
This removes the need re-parse the same expression. However if the max cache limit is reached, older cached expressions get deleted & will need to be re-parsed if used again."
mouse_filter = 0
text = "Max Cached PKExpressions:"

[node name="SpinBox" type="SpinBox" parent="Tabs/Configure/Max Cached PKExpressions"]
layout_mode = 2
max_value = 500.0
value = 3.0

[node name="Debug" type="VBoxContainer" parent="Tabs/Configure"]
layout_mode = 2

[node name="Title" type="Label" parent="Tabs/Configure/Debug"]
layout_mode = 2
text = "Debug:"
label_settings = SubResource("LabelSettings_07ncw")

[node name="Separator" type="HSeparator" parent="Tabs/Configure/Debug"]
layout_mode = 2

[node name="Print Any Processed" type="HBoxContainer" parent="Tabs/Configure/Debug"]
layout_mode = 2

[node name="Title" type="Label" parent="Tabs/Configure/Debug/Print Any Processed"]
layout_mode = 2
text = "Print any PKExpression processed:"

[node name="Toggle" type="CheckButton" parent="Tabs/Configure/Debug/Print Any Processed"]
layout_mode = 2

[node name="Warning Tag Sep" type="HSeparator" parent="Tabs/Configure"]
layout_mode = 2
size_flags_vertical = 10

[node name="Warning Tag" type="HBoxContainer" parent="Tabs/Configure"]
visible = false
layout_mode = 2
size_flags_horizontal = 4

[node name="Icon" type="CenterContainer" parent="Tabs/Configure/Warning Tag"]
layout_mode = 2

[node name="Background" type="ColorRect" parent="Tabs/Configure/Warning Tag/Icon"]
custom_minimum_size = Vector2(30, 35)
layout_mode = 2
color = Color(0.6881, 0.170417, 0.158828, 1)

[node name="Subject" type="Label" parent="Tabs/Configure/Warning Tag/Icon"]
custom_minimum_size = Vector2(0, 50)
layout_mode = 2
text = "!"
label_settings = SubResource("LabelSettings_1jgx6")

[node name="Label 1" type="Label" parent="Tabs/Configure/Warning Tag"]
layout_mode = 2
text = "Resources Script Path not found."
label_settings = SubResource("LabelSettings_fjtuu")

[node name="Guide" type="VBoxContainer" parent="Tabs"]
visible = false
layout_mode = 2
metadata/_tab_index = 1

[node name="Tabs" type="TabContainer" parent="Tabs/Guide"]
layout_mode = 2
size_flags_vertical = 3
tab_alignment = 1
current_tab = 0

[node name="Getting Started" type="RichTextLabel" parent="Tabs/Guide/Tabs"]
layout_mode = 2
bbcode_enabled = true
text = "For additional help, don't hesitate to ask in the [color=royal_blue][url=https://dsc.gg/sohp]Discord Server[/url][/color]. If you find any issues please report them on the [color=royal_blue][url=https://github.com/phosxd/PowerKey]Github Repo[/url][/color].

[font_size=30]Assigning a Script:[/font_size]
To use PowerKey, you will need to create a GDScript file to hold all your variables.
[ol] Create a new GDScript file that extends Node.
 In your Script, load any & all resources you plan to use. You can also run any logic needed in the \"_ready\" function, just make sure your variables are defined in the Scripts globals if you wan't to use them.
 Copy your Script file's path then paste it into the \"Resource Script Path\" text box.
 All done! Now you can access all variables defined in that script.[/ol]

[font_size=30]Writing an Expression:[/font_size]
Read through the \"Expressions\" guide page to understand how expressions work and how to implement them. If you still don't understand how everything works, please take a look at some examples located in the PowerKey addon directory."
metadata/_tab_index = 0

[node name="PKExpressions" type="RichTextLabel" parent="Tabs/Guide/Tabs"]
visible = false
layout_mode = 2
bbcode_enabled = true
text = "When you activated PowerKey in your project, it added a custom \"PKExpressions\" dropdown in the Inspector. Navigate to the \"PKExpressions\" dropdown located under the \"Node\" category. Now expanding the dropdown will show a text field where you can enter all your expressions. A PKExpression line should always start with the type.

Each \"Type\" is labled with their performance/memory impacts. Here are the definitions for each label:
- [color=green]None:[/color] Absolutely no impact.
- [color=green_yellow]Effectively None:[/color] Close to no impact. Difference only slightly noticable at very high quantities.
- [color=yellow_green]Low:[/color] Low impact, at very high quantities.
- [color=yellow]Okay:[/color] A considerate impact, when at high quantities.
- [color=orange]Moderate:[/color] Harmful impact, when dealing with high quantities.
By \"very high quantities\" I am talking near the hundred thousand range. Actual impact will greatly vary with your hardware, but I am just trying to convey the relative difference between the labels.

[font_size=30]Syntactic Structure:[/font_size]
PKExpressions' syntax & structural rules are simple, and should always follow the schemas below. \"<>\" denotes a required part, \"[]\" denotes an optional part.
[b]Schemas:[/b]
[ul] <Type> <Content>
 <Type>:[Parameters] <Content>
[/ul]

[font_size=30]A (Assign) Type:[/font_size]
[color=cyan]Memory Impact:[/color] [color=green]None[/color]
[color=cyan]Performance Impact (initial):[/color] [color=green_yellow]Effectively None[/color]
[color=cyan]Performance Impact (ongoing):[/color] [color=green]None[/color]
This expression type is very limiting & can only be used to assign a value from the Resources Script to a Node's property. You cannot access a property from any Variant other than a Dictionary or Object & you cannot call functions/methods. You cannot run code of any kind with this, but in return, PowerKey skips over any invalid expression & will only print errors instead of stopping the whole project & crashing it.
[b]Correct Examples:[/b]
[ul] A:text some_string
 A:text my_strings.this_one
 A:label_settings some_label_settings_resource
[/ul][b]Incorrect Examples:[/b]
[ul] A:text my_strings[0]
 A:text get_random_string()
 A some_value[/ul]

[font_size=30]L (Link) Expression Type:[/font_size]
[color=cyan]Memory Impact:[/color] [color=yellow]Okay[/color]
[color=cyan]Performance Impact (initial):[/color] [color=orange]Moderate[/color]
[color=cyan]Performance Impact (ongoing):[/color] [color=yellow]Okay[/color]
Much like the Assign expression type, this type applies a value to a Node property. The syntax & rules are nearly identical. The only difference being that with this type any changes made to the variable in the Resources Script are immediately reflected onto the Node property as if they were one in the same. [b]However[/b], this expression is not one-off & runs every frame which may cause performance issues when more than a thousand are running. This should only be used in careful consideration of the impacts it may cause.

[font_size=30]E (Execute) Expression Type:[/font_size]
[color=cyan]Memory Impact:[/color] [color=green]None[/color]
[color=cyan]Performance Impact (initial):[/color] [color=yellow]Okay[/color]
[color=cyan]Performance Impact (ongoing):[/color] [color=green]None[/color]
This expression type just lets you do whatever you wan't, AT YOUR OWN RISK. Your project WILL crash if you use invalid code or have missing variables. That said, this expression type does give you unlimited freedom to run any GDScript code. With this you can call functions, set values on the Node, & do complex logic if you wanted to. [b]However[/b], to access variables from the Resources Script, you will need to prefix any variable names with \"PK.\". To access the Node, instead of using \"self\", use \"S\".
[b]Correct Examples:[/b]
[ul] E print('hello world')
 E S.text = PK.some_string
 E var a := self.some_variable; print(a)"
metadata/_tab_index = 1

[node name="Global Translations" type="VBoxContainer" parent="Tabs"]
visible = false
layout_mode = 2
metadata/_tab_index = 2

[connection signal="tab_changed" from="Top Bar/Tab Bar" to="." method="_on_tab_bar_tab_changed"]
[connection signal="pressed" from="Top Bar/Button Github" to="." method="_on_button_github_pressed"]
[connection signal="text_changed" from="Tabs/Configure/Resources Path/Text Box" to="." method="_on_resources_script_path_text_changed"]
[connection signal="value_changed" from="Tabs/Configure/Max Cached PKExpressions/SpinBox" to="." method="_on_max_cached_pkexpressions_value_changed"]
[connection signal="toggled" from="Tabs/Configure/Debug/Print Any Processed/Toggle" to="." method="_on_debug_option_1_toggled"]
